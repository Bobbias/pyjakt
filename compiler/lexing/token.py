# Copyright (c) 2022-2022 Blair 'Bobbias' Stacey
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause-Clear

# Third party imports
from sumtype import sumtype

# First party imports
from compiler.lexing.util import TextSpan, NumericConstant


class Token(sumtype):
    def INVALID(span: TextSpan): ...
    def EOF(span: TextSpan): ...
    def EOL(span: TextSpan): ...

    # text/numbers
    def IDENTIFIER(name: str, span: TextSpan): ...
    def SINGLE_QUOTE_STRING(string: str, span: TextSpan): ...
    def SINGLE_QUOTE_BYTE_STRING(string: str, span: TextSpan): ...
    def DOUBLE_QUOTE_STRING(string: str, span: TextSpan): ...
    def QUOTED_STRING(string: str, span: TextSpan): ...
    def NUMBER(value: NumericConstant, span: TextSpan): ...

    # symbols
    def ARROW(span: TextSpan): ...
    def ASTERISK(span: TextSpan): ...
    def ASTERISKEQUAL(span: TextSpan): ...
    def LPAREN(span: TextSpan): ...
    def RPAREN(span: TextSpan): ...
    def LSQUARE(span: TextSpan): ...
    def RSQUARE(span: TextSpan): ...
    def LCURLY(span: TextSpan): ...
    def RCURLY(span: TextSpan): ...
    def COLON(span: TextSpan): ...
    def COLON_COLON(span: TextSpan): ...
    def EQUAL(span: TextSpan): ...
    def NOT_EQUAL(span: TextSpan): ...
    def DOUBLE_EQUAL(span: TextSpan): ...
    def FAT_ARROW(span: TextSpan): ...
    def RIGHT_SHIFT(span: TextSpan): ...
    def LEFT_SHIFT(span: TextSpan): ...
    def RIGHT_SHIFT_EQUAL(span: TextSpan): ...
    def LEFT_SHIFT_EQUAL(span: TextSpan): ...
    def RIGHT_ARITHMETIC_SHIFT(span: TextSpan): ...
    def LEFT_ARITHMETIC_SHIFT(span: TextSpan): ...
    def LESS_THAN(span: TextSpan): ...
    def GREATER_THAN(span: TextSpan): ...
    def LESS_THAN_OR_EQUAL(span: TextSpan): ...
    def GREATER_THAN_OR_EQUAL(span: TextSpan): ...
    def DOT(span: TextSpan): ...
    def COMMA(span: TextSpan): ...
    def TILDE(span: TextSpan): ...
    def SEMICOLON(span: TextSpan): ...
    def QUESTION_MARK(span: TextSpan): ...
    def QUESTION_MARK_QUESTION_MARK(span: TextSpan): ...
    def QUESTION_MARK_QUESTION_MARK_EQUAL(span: TextSpan): ...
    def PLUS(span: TextSpan): ...
    def PLUS_PLUS(span: TextSpan): ...
    def PLUS_EQUAL(span: TextSpan): ...
    def MINUS(span: TextSpan): ...
    def MINUS_MINUS(span: TextSpan): ...
    def MINUS_EQUAL(span: TextSpan): ...
    def FORWARD_SLASH(span: TextSpan): ...
    def FORWARD_SLASH_EQUAL(span: TextSpan): ...
    def BACK_SLASH(span: TextSpan): ...
    def CARET(span: TextSpan): ...
    def CARET_EQUAL(span: TextSpan): ...
    def PIPE(span: TextSpan): ...
    def PIPE_EQUAL(span: TextSpan): ...
    def PERCENT_SIGN(span: TextSpan): ...
    def PERCENT_SIGN_EQUAL(span: TextSpan): ...
    def EXCLAMATION_POINT(span: TextSpan): ...
    def AMPERSAND(span: TextSpan): ...
    def AMPERSAND_EQUAL(span: TextSpan): ...
    def DOLLAR_SIGN(span: TextSpan): ...

    # keywords
    def AND(span: TextSpan): ...
    def ANON(span: TextSpan): ...
    def AS(span: TextSpan): ...
    def BOXED(span: TextSpan): ...
    def BREAK(span: TextSpan): ...
    def CATCH(span: TextSpan): ...
    def CLASS(span: TextSpan): ...
    def CONTINUE(span: TextSpan): ...
    def COMPTIME(span: TextSpan): ...
    def CPP(span: TextSpan): ...
    def DEFER(span: TextSpan): ...
    def ELSE(span: TextSpan): ...
    def ENUM(span: TextSpan): ...
    def EXTERN(span: TextSpan): ...
    def FALSE(span: TextSpan): ...
    def FOR(span: TextSpan): ...
    def FUNCTION(span: TextSpan): ...
    def GUARD(span: TextSpan): ...
    def IF(span: TextSpan): ...
    def IMPORT(span: TextSpan): ...
    def IN(span: TextSpan): ...
    def IS(span: TextSpan): ...
    def LET(span: TextSpan): ...
    def LOOP(span: TextSpan): ...
    def MATCH(span: TextSpan): ...
    def MUT(span: TextSpan): ...
    def NAMESPACE(span: TextSpan): ...
    def NOT(span: TextSpan): ...
    def OR(span: TextSpan): ...
    def PRIVATE(span: TextSpan): ...
    def PUBLIC(span: TextSpan): ...
    def RAW(span: TextSpan): ...
    def RETURN(span: TextSpan): ...
    def RESTRICTED(span: TextSpan): ...
    def STRUCT(span: TextSpan): ...
    def THIS(span: TextSpan): ...
    def THROW(span: TextSpan): ...
    def THROWS(span: TextSpan): ...
    def TRUE(span: TextSpan): ...
    def TRY(span: TextSpan): ...
    def UNSAFE(span: TextSpan): ...
    def WEAK(span: TextSpan): ...
    def WHILE(span: TextSpan): ...
    def YIELD(span: TextSpan): ...

    def VAR(span: TextSpan): ...


def print_token(token: Token):
    if token.variant == 'INVALID':
        print(f'\x1b[38;5;9m{token}\x1b[38;5;250m')
    else:
        print(token)
